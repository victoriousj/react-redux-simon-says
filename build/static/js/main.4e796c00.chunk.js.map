{"version":3,"sources":["Components/Button.js","Components/Score.js","Components/ControlButtons.js","Components/Controls.js","actiontypes/control.js","actions/control.js","Container.js","reducers/control.js","index.js"],"names":["Button","props","react_default","a","createElement","onClick","buttonPress","index","style","backgroundColor","color","className","Score","score","ControlButtons","concat","isPlaying","startGame","Controls","Components_Score","Components_ControlButtons","GAME_END","GAME_START","BUTTON_PRESS","GAME_CHANGE_COLOR_SCHEME","type","ControlActionTypes","buttonIndex","changeColorScheme","colorSchemeId","Container","_this$props","this","dispatch","currentColorScheme","highScore","currentPlaybackSequence","buttonColors","bindActionCreators","ControlActionCreators","buttonComponents","map","buttonColor","Components_Button","key","Components_Controls","Component","connect","state","initialState","playbackSequence","playerPlaybackSequence","fetchRandomButtonIndex","Math","floor","random","parseScore","numScore","parseInt","store","createStore","Control","arguments","length","undefined","action","Object","objectSpread","currentplayerPlaybackSequence","push","newScore","window","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","es","src_Container","document","getElementById"],"mappings":"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","file":"static/js/main.4e796c00.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Button = props => (\n    <div \n        onClick={() => props.buttonPress(props.index)}\n        style={{backgroundColor: props.color}} \n        className=\"button\">\n    </div>\n);\n\nButton.propTypes = {\n    index: PropTypes.number.isRequired,\n    color: PropTypes.string.isRequired,\n    buttonPress: PropTypes.func.isRequired,\n};\n\nexport default Button;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Score = props => (\r\n    <div className=\"game-score\">\r\n        <span>\r\n            {props.score}\r\n        </span>\r\n    </div>\r\n);\r\n\r\nScore.propTypes = {\r\n    score: PropTypes.string.isRequired\r\n}\r\n\r\nexport default Score;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst ControlButtons = props => (\r\n    <div className=\"control-buttons\">\r\n    <div className=\"game-light\"></div>\r\n        <div \r\n            className=  {`game-switch ${props.isPlaying \r\n                                        ? 'game-on' \r\n                                        : 'game-off'}`\r\n                        } \r\n            onClick={() => props.startGame()}\r\n        >\r\n            <div className=\"game-slider\"></div>\r\n        </div>\r\n    <div className=\"game-reset\"></div>\r\n    </div>\r\n)\r\n\r\nControlButtons.propTypes = {\r\n    isPlaying: PropTypes.bool.isRequired,\r\n}\r\n\r\nexport default ControlButtons;","import React from 'react';\r\n\r\nimport Score from './Score';\r\nimport ControlButtons from './ControlButtons';\r\n\r\nconst Controls = props => (\r\n    <div className=\"controls\">\r\n        <div className=\"game-name\">\r\n            <span>simon</span>\r\n        </div>\r\n        <div className=\"game-controls\">\r\n            <Score score={props.score} />\r\n            <ControlButtons \r\n                isPlaying={props.isPlaying} \r\n                startGame={props.startGame}\r\n            />\r\n        </div>\r\n    </div>\r\n);\r\n\r\nexport default Controls;","export const GAME_END = 'control/GAME_END';\nexport const GAME_START = 'control/GAME_START';\nexport const BUTTON_PRESS = 'control/BUTTON_PRESS';\nexport const GAME_CHANGE_COLOR_SCHEME = 'control/GAME_CHANGE_COLOR_SCHEME';","import * as ControlActionTypes from '../actiontypes/control';\n\nexport const startGame = () => {\n    return {\n        type: ControlActionTypes.GAME_START\n    };\n};\n\nexport const endGame = () => {\n    return {\n        type: ControlActionTypes.GAME_END\n    };\n};\n\nexport const buttonPress = buttonIndex => {\n    return {\n        type: ControlActionTypes.BUTTON_PRESS,\n        buttonIndex\n    };\n};\n\nexport const changeColorScheme = colorSchemeId => {\n    return {\n        type: ControlActionTypes.GAME_CHANGE_COLOR_SCHEME,\n        colorSchemeId\n    };\n};","import React, { Component } from 'react';\nimport { bindActionCreators } from 'redux';\nimport { connect } from 'react-redux';\n\nimport './App.css';\n// import './App.2.css';\nimport Button from './Components/Button';\nimport Controls from './Components/Controls';\nimport * as ControlActionCreators from './actions/control';\n\nclass Container extends Component {\n\n  render() {\n    const { dispatch, isPlaying, highScore, currentPlaybackSequence, currentColorScheme, score, buttonColors } = this.props;\n\n    const startGame = bindActionCreators(ControlActionCreators.startGame, dispatch);\n    const buttonPress = bindActionCreators(ControlActionCreators.buttonPress, dispatch);\n    const changeColorScheme = bindActionCreators(ControlActionCreators.changeColorScheme, dispatch);\n    const buttonComponents = buttonColors[currentColorScheme].map((buttonColor, index) => \n      <Button \n        key={index}\n        index={index} \n        color={buttonColor}\n        buttonPress={buttonPress} \n      />);\n\n    return (\n      <div className=\"App\">\n          <button \n            type=\"button\" \n            className=\"button-toggleScheme\" \n            onClick={changeColorScheme}\n          />\n        <div className=\"container\">\n          {buttonComponents}}\n          <Controls \n            score={score}\n            startGame={startGame}\n            isPlaying={isPlaying}\n          />\n        </div>\n      </div>\n    );\n  };\n}\n\nconst mapStateToProps = state => (\n  {\n    score: state.score,\n    isPlaying: state.isPlaying,\n    highScore: state.highScore,\n    buttonColors: state.buttonColors,\n    currentColorScheme: state.currentColorScheme\n  }\n);\n\nexport default connect(mapStateToProps)(Container);\n","import * as ControlActionTypes from '../actiontypes/control';\n\nconst initialState = {\n    score: \"000\",\n    \n    highScore: \"000\",\n\n    isPlaying: false,\n\n    playbackSequence: [],\n    \n    playerPlaybackSequence: [],\n\n    buttonColors: [\n        [\n            \"#e74c3c\",\n            \"#f1c40f\",\n            \"#2ecc71\",\n            \"#9b59b6\"\n        ], \n        [\n            \"#f0f\",\n            \"#fff\",\n            \"#f00\",\n            \"#0ff\"\n        ]\n    ],\n\n    currentColorScheme: 0,\n\n    fetchRandomButtonIndex: () => Math.floor(Math.random() * 4), \n};\n\nexport default function Control(state=initialState, action) {\n\n    switch(action.type) {\n\n        case ControlActionTypes.GAME_START: {\n            if (!state.isPlaying) {\n                return {\n                    ...state,\n                    isPlaying: true,\n                    playbackSequence: []\n                }\n            }\n            else {\n                return Control(\n                    state, \n                    {\n                        type: ControlActionTypes.GAME_END\n                    }\n                );\n            }\n        };\n\n        case ControlActionTypes.GAME_END: {\n            return {\n                ...state,\n                score: \"000\",\n                isPlaying: false,\n                playerPlaybackSequence: []\n            };\n        };\n\n        case ControlActionTypes.BUTTON_PRESS: {\n            if (state.isPlaying) {\n                let currentplayerPlaybackSequence = state.playerPlaybackSequence;\n                currentplayerPlaybackSequence.push(action.buttonIndex);\n\n                let newScore = parseScore(state.score);\n                \n                return {\n                    ...state,\n                    score: newScore,\n                    playerPlaybackSequence: currentplayerPlaybackSequence\n                };\n            }\n            return {\n                ...state,\n            }\n        };\n\n        case ControlActionTypes.GAME_CHANGE_COLOR_SCHEME: {\n            return {\n                ...state,\n                currentColorScheme: state.currentColorScheme === 0 ? 1 : 0\n            };\n        };\n\n        default:\n            return state;\n    }\n}\n\n// Helpers\n\nconst parseScore = score => {\n    let numScore = parseInt(score);\n    let parsedScore;\n\n    numScore++;\n\n    parsedScore = score < 9 \n        ? score = \"00\" + numScore            \n        : score = \"0\" + numScore;\n\n    return parsedScore;\n}\n\n// end Helpers","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Container from './Container';\nimport { createStore } from 'redux';\nimport { Provider } from 'react-redux';\n\nimport './index.css';\n\nimport ControlReducer from './reducers/control';\n\nconst store = createStore(\n    ControlReducer,\n    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n);\n\nReactDOM.render(\n    <Provider store={store}>\n        <Container /> \n    </Provider>,\n\n    document.getElementById('root')\n);\n"],"sourceRoot":""}